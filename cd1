
lexical 
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>
int main()
{
	char a[100];
	int i=0, flag=0;
	printf("enter the string:");
	gets(a);
	puts(a);
	if(isalpha(a[i]))
{
	for(i=1;i<=strlen(a);i++)
	{
		if(isalpha(a[i])||isdigit(a[i])||a[i]=='_')
		{
			flag=1;
		}
		else
		{
		
			break;
			
		}
	}
}
else
{
	printf("invalid");
	exit(0);
}
if(flag==1)
{
	printf("valid");
}
else
{
	printf("invalid");
}
}
comments
#include<stdio.h>
#include<ctype.h>
main()
{
	char a[100];
	gets(a);
	printf("enter the string:");
	if(a[0]=='/'&& a[1]=='/')
	{
		printf("comments");
	}
	else
	{
		printf("not comments");
	}
}
constant
#include<stdio.h>
#include<ctype.h>
#include<string.h>
main()
{
	
	int i,flag=0;
	char a[100];
	printf("enter the no. :");
	gets(a);
	for(i=0;i<strlen(a);i++)
	{
		if(isdigit(a[i]))
		{
			flag=1;
		}
		else
		{
			break;
			
		}
	}
	if(flag==1)
	{
		printf("string is constant");
	}
	else
	{
		printf("string is not constant");
	}
}
float
#include<stdio.h> 
#include<math.h> 
#include<conio.h>
int main() 
	{ 
        float a; 
        printf("enter a digit\n"); 
        scanf("%f",&a); 
        int x = ceil(a); 
        if ( x == a) 
    { 
        printf("given is an integer\n"); 
	} 
        else 
	{ 
        printf("given is a float\n"); 
    } 
        return 0; 
	}
  keyword
  #include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
	char st[10];
	int i,flag=0,m;
    char *s[]={"if","else","for","continue","while"};
printf("\n enter the string :");
gets(st);
for(i=0;i<5;i++)
{
	m=strcmp(st,s[i]);
	if(m==0)
	flag=1;
}
if(flag==0)
{
	printf("\n it is not a keyword");
}
else
{
	printf("\n it is a keyword");
}
}
word and line
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
main()
{
	FILE *fp;
	int wc=0,lc=0,i=0;
	char ch;
	fp=fopen("path.txt","r");
	if(fp==NULL)
	while((ch=fgetc(fp))!=EOF)
	{
	     i++;
	     printf("%c ",ch);
		if(ch==' '||ch==','||ch==';'||ch=='\n'||ch=='.')
		{
			
			wc++;
		}
		if(ch==';'||ch=='\n'||ch=='.')
		{
			lc++;
		}
	
	}
	printf("word count is %d\n",wc);
	printf("Line count is %d\n",lc);
}
first and follow
#include<stdio.h> 
#include<string.h>
int n,m=0,p,i=0,j=0;
char a[10][10],followResult[10];
void follow(char c);
void first(char c);
void addToResult(char);
int main()
{
 int i;
 int choice;
 char c,ch;
 printf("Enter the no.of productions: ");
scanf("%d", &n);
 printf(" Enter %d productions\nProduction with multiple terms should be give as separate productions \n", n);
 for(i=0;i<n;i++)
  scanf("%s%c",a[i],&ch);
    // gets(a[i]);
 do
 {
  m=0;
  printf("Find FOLLOW of -->");
  scanf(" %c",&c);
  follow(c);
  printf("FOLLOW(%c) = { ",c);
  for(i=0;i<m;i++)
   printf("%c ",followResult[i]);
  printf(" }\n");
  printf("Do you want to continue(Press 1 to continue....)?");
 scanf("%d%c",&choice,&ch);
 }
 while(choice==1);
}
void follow(char c)
{
    if(a[0][0]==c)addToResult('$');
 for(i=0;i<n;i++)
 {
  for(j=2;j<strlen(a[i]);j++)
  {
   if(a[i][j]==c)
   {
    if(a[i][j+1]!='\0')first(a[i][j+1]);
    if(a[i][j+1]=='\0'&&c!=a[i][0])
     follow(a[i][0]);
   }
  }
 }
}
void first(char c)
{
      int k;
                 if(!(isupper(c)))
                     //f[m++]=c;
                     addToResult(c);
                 for(k=0;k<n;k++)
                 {
                 if(a[k][0]==c)
                 {
                 if(a[k][2]=='$') follow(a[i][0]);
                 else if(islower(a[k][2]))
                     //f[m++]=a[k][2];
                     addToResult(a[k][2]);
                 else first(a[k][2]);
                 }
                 }
}
void  addToResult(char c)
{
    int i;
    for( i=0;i<=m;i++)
        if(followResult[i]==c)
            return;
   followResult[m++]=c;
}
parse table
#include <stdio.h>
#include <string.h>
#include <conio.h>
char prol[7][10] = { "S", "A", "A", "B", "B", "C", "C" };
char pror[7][10] = { "A", "Bb", "Cd", "aB", "@", "Cc", "@" };
char prod[7][10] = { "S->A", "A->Bb", "A->Cd", "B->aB", "B->@", "C->Cc", "C->@" };
char first[7][10] = { "abcd", "ab", "cd", "a@", "@", "c@", "@" };
char follow[7][10] = { "$", "$", "$", "a$", "b$", "c$", "d$" };
char table[5][6][10];
 
int numr(char c)
{
   switch (c)
   {
      case 'S':return 0;
      case 'A':return 1;
      case 'B':return 2;
      case 'C':return 3;
      case 'a':return 0;
      case 'b':return 1;
      case 'c':return 2;
      case 'd':return 3;
      case '$':return 4;
   }
   return (2);
}
int main()
{
   int i, j, k;
   for (i = 0; i < 5; i++)
   for (j = 0; j < 6; j++)
   strcpy(table[i][j], " ");
   printf("The following grammar is used for Parsing Table:\n");
   for (i = 0; i < 7; i++)
   printf("%s\n", prod[i]);
   printf("\nPredictive parsing table:\n");
   fflush(stdin);
   for (i = 0; i < 7; i++)
   {
      k = strlen(first[i]);
      for (j = 0; j < 10; j++)
         if (first[i][j] != '@')
            strcpy(table[numr(prol[i][0]) + 1][numr(first[i][j]) + 1], prod[i]);
   }
    for (i = 0; i < 7; i++)
   {
      if (strlen(pror[i]) == 1)
      {
         if (pror[i][0] == '@')
         {
            k = strlen(follow[i]);
            for (j = 0; j < k; j++)
               strcpy(table[numr(prol[i][0]) + 1][numr(follow[i][j]) + 1], prod[i]);
         }
      }
   }
   strcpy(table[0][0], " ");
   strcpy(table[0][1], "a");
   strcpy(table[0][2], "b");
   strcpy(table[0][3], "c");
   strcpy(table[0][4], "d");
   strcpy(table[0][5], "$");
   strcpy(table[1][0], "S");
   strcpy(table[2][0], "A");
   strcpy(table[3][0], "B");
   strcpy(table[4][0], "C");
   printf("\n--------------------------------------------------------\n");
 
   for (i = 0; i < 5; i++)
      for (j = 0; j < 6; j++)
      {
         printf("%-10s", table[i][j]);
         if (j == 5)
            printf("\n--------------------------------------------------------\n");
      }
}
shift reduce
#include<stdio.h>
#include<conio.h>
#include<string.h>
int k=0,z=0,i=0,j=0,c=0;
char a[16],ac[20],stk[15],act[10];
void check();
int main()
   {
      puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id");
      puts("enter input string :");
      gets(a);
      c=strlen(a);
      strcpy(act,"SHIFT->");
      puts("stack \t input \t action");
      for(k=0,i=0; j<c; k++,i++,j++)
       {
         if(a[j]=='i' && a[j+1]=='d')
           {
              stk[i]=a[j];
              stk[i+1]=a[j+1];
              stk[i+2]='\0';
              a[j]=' ';
              a[j+1]=' ';
              printf("\n$%s\t%s$\t%sid",stk,a,act);
              check();
           }
         else
           {
              stk[i]=a[j];
              stk[i+1]='\0';
              a[j]=' ';
              printf("\n$%s\t%s$\t%ssymbols",stk,a,act);
              check();
           }
       }
       
   }
void check()
   {
     strcpy(ac,"REDUCE TO E");
     for(z=0; z<c; z++)
       if(stk[z]=='i' && stk[z+1]=='d')
         {
           stk[z]='E';
           stk[z+1]='\0';
           printf("\n$%s\t%s$\t%s",stk,a,ac);
           j++;
         }
     for(z=0; z<c; z++)
       if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='E')
         {
           stk[z]='E';
           stk[z+1]='\0';
           stk[z+2]='\0';
           printf("\n$%s\t%s$\t%s",stk,a,ac);
           i=i-2;
         }
     for(z=0; z<c; z++)
       if(stk[z]=='E' && stk[z+1]=='*' && stk[z+2]=='E')
         {
           stk[z]='E';
           stk[z+1]='\0';
           stk[z+1]='\0';
           printf("\n$%s\t%s$\t%s",stk,a,ac);
           i=i-2;
         }
     for(z=0; z<c; z++)
       if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')')
         {
           stk[z]='E';
           stk[z+1]='\0';
           stk[z+1]='\0';
           printf("\n$%s\t%s$\t%s",stk,a,ac);
           i=i-2; 
         }
   }
   intermediate to machine
   #include<stdio.h>
#include<conio.h>
#include<string.h>
char op[2],arg1[5],arg2[5],result[5];
void main()
{
  FILE *fp1,*fp2;
  fp1=fopen("input.txt","r");
  fp2=fopen("output.txt","w");
  while(!feof(fp1))
  {

    fscanf(fp1,"%s%s%s%s",op,arg1,arg2,result);
    if(strcmp(op,"+")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nADD R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
     if(strcmp(op,"*")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nMUL R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    if(strcmp(op,"-")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nSUB R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
       if(strcmp(op,"/")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nDIV R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
if(strcmp(op,"=")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    }
    fclose(fp1);
    fclose(fp2);
    getch();
  }
